<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">
      
      <!-- springMvc三大核心组件
               处理器映射器  通过url地址  解析得到对应的方法(Handler)处理器   可以理解为一个hashMap key 存的是url
               val存的是方法(Handler),得到这个处理器后 通过一系列的拦截链，权限验证大多，之后返回处理器给
                                             前端控制器
             
                                            然后前端控制器将Handler传递给 
       处理器适配器，      适配器通过 是注解方式还是非注解方式来 选择不同的处理器 处理 方法， 执行方法，
                                           返回ModelAndView对象，
      
                                        前端控制器将得到的ModelAndView对象传递给 
       视图解析器，视图解析器解析jsp页面和拼接数据，得到html页面，返回给前端控制器，然后再响应给用户
                                得到最终显示的界面
       -->
      <!-- 包扫描  将包下的controller 都由spring创建 -->
        <context:component-scan base-package="cn.itheima.controller"></context:component-scan>
        
        
        <!-- 默认情况下 不配置处理器映射器 和 处理器适配器  也行， 他会在DispatcherServlet.properties配置文件中自动扫描寻找
        但这样的效率肯定慢，每次请求都要去扫描匹配一次，所以配置上，但是配置上也不好，每次跟新文件都要跟着一起跟新，如果服务器多，就要修改很多
        所以最终是选择注解驱动  会自动配置最新的 处理器映射器 和 处理器适配器 -->
        
        <mvc:annotation-driven></mvc:annotation-driven>
        
        
        <!-- 一般情况下  视图解析器也可以不配置，默认就是解析jsp，(视图还包括pdf 图标 jsp 等等)
        但是为了一劳永逸，因为显式的配置视图解析器可以配置他的 前缀和后缀属性 -->
        
        <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
            <property name="prefix" value="/WEB-INF/jsp/"></property>
            <property name="suffix" value=".jsp"></property>
        </bean>
</beans>